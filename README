SoloNotebooks is a project that seeks to create a complete
and advanced notebook comparison and price search system
for the chilean market.

Installation instructions for SoloNotebooks on Ubuntu 10.04 (Development)
=========================================================================

This document describes the steps to take to install the
development version of SoloNotebooks on a freshly installed
Ubuntu machine only with its normal updates installed,
the instructions are mostly the same for other distributions.

1. Installing pre-requisites
----------------------------

SoloNotebooks is an application written in Python using the
Django framework, with some additional plugins, in this step
we will install all the required libraries to get everything
working smoothly.

Even though most of these libraries are available via easy_install,
numerous problems with this system have led me to prefer to install
using the sources.

NOTE: If you are using CentOS, RedHat or any other distribution
that doesn't use Python 2.6 as default, make a parallel
installation of Python as described on this page:

http://blog.perplexedlabs.com/2009/11/15/setup-python-2-6-4-mod_wsgi-2-6-and-django-1-1-1-on-centos-5-3-cpanel/

1.1 Development Tools

Since we are going to be compiling, it's better to be safe with
the development tools

$ sudo aptitude install build-essential

1.2 Django

This is the framework behind all of the engine, any version over
1.1 should work without any problems.

$ wget http://www.djangoproject.com/download/1.2/tarball/
$ tar xvzf Django-1.2.tar.gz
$ cd Django-1.2/
$ sudo python setup.py install

1.3 Mechanize

Mechanize is the librart in charge of emulating a navigator surfing
the store webpages, needed for the parser.

$ wget http://wwwsearch.sourceforge.net/mechanize/src/mechanize-0.2.1.tar.gz
$ tar xvzf mechanize-0.2.1.tar.gz
$ cd mechanize-0.2.1/
$ sudo python setup.py install

1.4 BeautifulSoup

BeautifulSoup is a parser for HTML pages that allows us to grab the info
for each notebook.  Please note that we HAVE to use the 3.0.8 version and
not the latest, as the latter has horrible support for badly coded webpages.

$ wget http://www.crummy.com/software/BeautifulSoup/download/3.x/BeautifulSoup-3.0.8.1.tar.gz
$ tar xvzf BeautifulSoup-3.0.8.1.tar.gz
$ cd BeautifulSoup-3.0.8.1/
$ sudo python setup.py install

1.5 ElementTree

ElementTree help BeautifulSoup parse webpages

$ wget http://effbot.org/media/downloads/elementtree-1.2.6-20050316.tar.gz
$ tar xvzf elementtree-1.2.6-20050316.tar.gz
$ cd elementtree-1.2.6-20050316/
$ sudo python setup.py install

1.6 Sorl thumbnail

Sorl thumbnail is the manager of images, and it handles automatic image
resizing among other goodies.

$ wget http://sorl-thumbnail.googlecode.com/files/sorl-thumbnail-3.2.5.tar.gz
$ tar xvzf sorl-thumbnail-3.2.5.tar.gz
$ cd sorl-thumbnail-3.2.5/
$ sudo python setup.py install

1.6 South

South is the migration framework we use to change the database to add
new functionalities

$ wget http://www.aeracode.org/releases/south/south-0.7.1.tar.gz
$ tar xvzf south-0.7.1.tar.gz
$ cd south/
$ sudo python setup.py install

1.7 Pycha

Pycha is a chart generator extension for Python and we use it to
generate the price change charts.




2. Bringing in the source code
------------------------------

Now we are in position to download and successfully launch the project,
Ubuntu doesn't have git installed by default, so you may need to install
it before proceeding

$ sudo aptitude install git-core

Now we can download the sources from the repositories

$ git clone git://github.com/vkhemlan/SoloNotebooks.git

For security reasons, the "settings.py" file used by django is not included
in the sources, therefore we need to provide it.  Here is a template for this 
file using Django 1.2, place it in the directory django/solonotebooks

=================================================

# Django settings for SoloNotebooks project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '[PATH_TO_SQLITE_DB]',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}

TIME_ZONE = 'America/Chicago'
LANGUAGE_CODE = 'en-us'
SITE_ID = 1
USE_I18N = True
USE_L10N = True
MEDIA_ROOT = '[PATH_TO_REPOSITORY]/apache/media/pics'
MEDIA_URL = '/media/pics/'
ADMIN_MEDIA_PREFIX = '/media/admin/'
THUMBNAIL_BASEDIR = 'resize'
SECRET_KEY = 'ls!l1u6(#x89ltrbmj)m8*=nxusk5xdv=3x9jpaz^jvh2s@*n9'

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)

LOGIN_URL = '/manager/login/'

ROOT_URLCONF = 'solonotebooks.urls'

TEMPLATE_DIRS = (
    [PATH_TO_REPOSITORY]/django/templates
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.admin',
    'solonotebooks.cotizador',
    'south'
)

================================================

Replace [PATH_TO_SQLITE_DB] with a route to a writable file (Django will create 
it) and [PATH_TO_REPOSITORY] with the location of the repository 
(e.g. /home/vkhemlan/SoloNotebooks)

Now we need to set up the database

$ cd django/solonotebooks
$ python manage.py syncdb

When prompted to create an admin user, do so with any data you want

Now, we need to synchronize south with the current state of the model / database

$ python manage.py migrate cotizador

The repository is configures for Django to serve static files by itself, so no 
further configurations are needed

To run the application:

$ python manage.py runserver

And access the website

http://127.0.0.1:8000

3. Final details
-------------------------------------------------

By now the web side of the application should be running without problems, but 
without any notebooks, to fix this let us run the updater script to add some 
base models to work on

$ cd django
$ python updater_script.py

After a while, the script will finish and then you can go to

http://127.0.0.1:8000/manager/

To login with the data you provided during the database synchronization, and then to

http://127.0.0.1:8000/manager/new_notebooks/

To see a list of notebooks.  Choose to edit one, click the "Add Notebook" 
button, fill up the information and then save it (remember to save on the 
notebook pop-up and on the page that opened that popup!)

To guarantee that the notebook will appear in the main page, we need to execute a script that normalizes the DB

$ cd django
$ python manual_update.py

Now the notebook should appear on the main page.
